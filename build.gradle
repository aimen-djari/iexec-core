buildscript {
    ext {
        springBootVersion = '2.2.13.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'jacoco'
    id 'org.sonarqube' version '2.7'
    id 'maven-publish'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.iexec.core'
sourceCompatibility = 11
targetCompatibility = 11


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "https://nexus.iex.ec/repository/maven-public/"
    }

    maven { url "https://jitpack.io" }
}

ext {
    //https://github.com/spring-cloud/spring-cloud-openfeign/issues/171
    //Greenwich.SR2 is a patch for Greenwich.RELEASE
    springCloudVersion = 'Greenwich.SR2'
    mongockVersion = '4.2.7.BETA'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"

    // spring
    implementation ("org.springframework.boot:spring-boot-starter") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' //required for Graylog
    }
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

    // NoSuchMethodError: 'okhttp3.RequestBody okhttp3.RequestBody.create(java.lang.String, okhttp3.MediaType)'
    implementation 'com.squareup.okhttp3:okhttp:4.3.1' // Web3j issue: https://github.com/web3j/web3j/issues/1180
    // NoSuchMethodError: 'byte[] kotlin.collections.ArraysKt.copyInto(byte[], byte[], int, int, int)'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.50' // https://stackoverflow.com/a/57907899

    testImplementation "org.springframework.boot:spring-boot-starter-test"

    // swagger
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    // jason web token
    implementation "io.jsonwebtoken:jjwt:0.7.0"

    // expiring map
    implementation "net.jodah:expiringmap:0.5.8"

    // ipfs
    implementation "com.github.ipfs:java-ipfs-http-client:1.2.3"

    // graylog
    implementation 'biz.paluch.logging:logstash-gelf:1.5.1'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.1.5'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

    // mongock
    implementation "com.github.cloudyrock.mongock:mongock-spring-v5:${mongockVersion}"
    implementation "com.github.cloudyrock.mongock:mongodb-springdata-v2-driver:${mongockVersion}"

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.10'

    // awaitility
    testImplementation 'org.awaitility:awaitility:4.0.1'
}

jar {
    enabled = true
    archiveClassifier.set('library')
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.3"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "master"
def isDevelopBranch = gitBranch == "develop"
def canUploadArchives = (isMasterBranch || isDevelopBranch ) && project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

project.ext.getNexusMaven = {
    def nexusMavenBase = "https://nexus.iex.ec/repository"
    if (isSnapshotVersion) {
        return nexusMavenBase + "/maven-snapshots/"
    } else {
        return nexusMavenBase + "/maven-releases/"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url getNexusMaven
        }
    }
}

publish.enabled canUploadArchives

import org.apache.tools.ant.filters.ReplaceTokens

// create the version controller for the core
task createVersion(type: Copy) {
    // delete old one
    delete 'src/main/java/com/iexec/core/utils/version/Version.java'
    // use and copy template to the new location
    from 'src/main/resources/Version.java.template'
    into 'src/main/java/com/iexec/core/utils/version/'

    rename { String fileName ->
        fileName.replace('.template', '')
    }
    // replace tokens in the template file
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}
// the createVersion task should be called before compileJava or the version service will not work
compileJava.dependsOn createVersion

def imageName = "nexus.iex.ec/iexec-core"

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    if (isSnapshotVersion) {
        return imageNameWithVersion + "-" + gitShortCommit
    } else {
        return imageNameWithVersion
    }
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

task prepareDockerFile(type: Copy) {
    delete 'build/main/resources/'
    from 'Dockerfile'
    into 'build/main/resources/'
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}


task buildImage(type: Exec) {
    description 'Build a docker image for the core'
    commandLine("sh", "-c", "docker image build -f build/main/resources/Dockerfile -t " + getDockerImageNameFull() + " . &&" +
            "docker tag " + getDockerImageNameFull() + " " + imageName + ":dev")
}

buildImage.dependsOn prepareDockerFile
buildImage.enabled = (isMasterBranch || isDevelopBranch ) || project.hasProperty("forceDockerBuild")

task pushImage(type: Exec) {
    if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
        commandLine("sh", "-c", "docker login -u " + project.nexusUser + " -p " + project.nexusPassword + " nexus.iex.ec && " +
                "docker push " + getDockerImageNameFull() + " && " +
                "docker tag " + getDockerImageNameFull() + " " + getDockerImageNameShortCommit() + " && " +
                "docker push " + getDockerImageNameShortCommit() + " && " +
                "docker logout")
    } else {
        println "Credentials for DockerHub are missing, the images cannot be pushed"
    }
}

pushImage.dependsOn buildImage
pushImage.enabled = (isMasterBranch || isDevelopBranch ) && project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")
